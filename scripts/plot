#! /usr/bin/python3
'''
Take the contents of a csv or piped input from stdin and plot using gnuplot.
Requires gnuplot to be installed (obviously!)

Example usage
-------------

$ cat data

nclients,avgCPU,avgMEM,minCPU,minMEM,maxCPU,maxMEM
0,0.00,0.05,0.00,0.00,0.01,0.05
1,2.11,0.19,1.75,0.19,2.26,0.19
2,2.80,0.19,1.96,0.19,3.87,0.19
4,5.21,0.19,3.80,0.19,7.00,0.19
6,9.92,0.20,9.03,0.19,10.42,0.21
8,11.38,0.23,9.16,0.21,13.04,0.24
10,12.31,0.25,10.91,0.24,13.17,0.27
15,12.98,0.27,11.02,0.27,14.43,0.28
20,17.30,0.31,13.69,0.27,23.27,0.37

# Plot directly from reading the file:

$ plot -d ',' data

# Or using awk to filter columns:
# Note that the deliminator is being changed to a space due to the output
# that gets piped from awk

$ cat data | awk -F, '{ print $1,$2,$4,$6 }' | plot -d ' '  # CPU columns
$ cat data | awk -F, '{ print $1,$3,$5,$7 }' | plot -d ' '  # MEM columns

'''
import sys
from subprocess import call
from tempfile import mkstemp
from argparse import ArgumentParser


parser = ArgumentParser()
parser.add_argument(
    '-d',
    '--delim',
    type=str,
    default=',',
    required=False,
    help='Column deliminator in input file.'
)
parser.add_argument(
    '-x',
    '--xaxis',
    type=int,
    default=1,
    required=False,
    help='Column to use as the x-axis of the plot.'
)
parser.add_argument(
    '-t',
    '--terminal',
    action='store_true',
    help='Plot in the terminal, not in a graphical window.'
)
parser.add_argument(
    '-l',
    '--logy',
    action='store_true',
    help='Plot with a log y axis'
)
parser.add_argument(
    'file',
    nargs='?'
)
args = parser.parse_args()

# Make a temp file if we need it and handle piped input
if args.file:
    FILE = args.file
elif not sys.stdin.isatty():
    piped_input = sys.stdin.read()
    _, FILE = mkstemp()
    with open(FILE, 'w') as f:
        f.write(piped_input)
else:
    print('ERROR: unable to detect input', file=sys.stderr)
    sys.exit(1)

DELIM = args.delim
X = args.xaxis

# Fetch column names
with open(FILE, 'r') as f:
    first_line = f.readline()
    COLNAMES = first_line.split(DELIM)

# Templates for building the gnuplot command string
tmp = ("set datafile separator '{}'; "
       "set title '{}';"
       "set key outside Left box 3"
       "set title 'Key'; plot"
       )
PLOT_CMD = tmp.format(DELIM, FILE)
if args.logy:
    PLOT_CMD = 'set logscale y; ' + PLOT_CMD
if args.terminal:
    PLOT_CMD = 'set term dumb; ' + PLOT_CMD
LINE = "'{}' using {}:{} title '{}' w l, "

if len(COLNAMES) < 2:
    print('ERROR: Not enough columns to plot', file=sys.stderr)
    sys.exit(1)

for ix, colname in enumerate(COLNAMES):
    # Make sure that we don't plot (x, x)
    if ix + 1 != X:
        PLOT_CMD += LINE.format(FILE, X, ix + 1, colname.replace('_', ' '))

retcode = call(['gnuplot', '-p', '-e', PLOT_CMD])
sys.exit(retcode)
