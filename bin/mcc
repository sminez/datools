#! /usr/bin/awk -f
# https://en.wikipedia.org/wiki/Matthews_correlation_coefficient
#
# Compute the Matthews Correlation Coefficient for both ep and pu
# from a CSV with columns:
#     occupied,ep,pu
#
# occupied being 0/1 and ep/pu being floats from 0.0 - 1.0

BEGIN {
    FS=","
    THRESHOLD=0.5
}

# Skip any lines that can't be parsed as numeric
$1 !~ /^-?[0-9]*\.?[0-9]+$/ {
    next
}

# Count our True/False +ve/-ve rates
# ----------------------------------
# ep
{ if($1 == 1 && $2 < THRESHOLD) { ep_TP++ } }
{ if($1 == 0 && $2 > THRESHOLD) { ep_TN++ } }
{ if($1 == 1 && $2 > THRESHOLD) { ep_FN++ } }
{ if($1 == 0 && $2 < THRESHOLD) { ep_FP++ } }

# pu
{ if($1 == 1 && $3 < THRESHOLD) { pu_TP++ } }
{ if($1 == 0 && $3 > THRESHOLD) { pu_TN++ } }
{ if($1 == 1 && $3 > THRESHOLD) { pu_FN++ } }
{ if($1 == 0 && $3 < THRESHOLD) { pu_FP++ } }


END {
    ep_numerator = ep_TP*ep_TN - ep_FP*ep_FN
    ep_denominator = sqrt((ep_TP+ep_FP)*(ep_TP+ep_FN)*(ep_TN+ep_FP)*(ep_TN+ep_FN))

    pu_numerator = pu_TP*pu_TN - pu_FP*pu_FN
    pu_denominator = sqrt((pu_TP+pu_FP)*(pu_TP+pu_FN)*(pu_TN+pu_FP)*(pu_TN+pu_FN))

    printf("MCC computed with a threshold of %.2f\n", THRESHOLD)
    printf("ep MCC = %.2f\n", ep_numerator / ep_denominator)
    printf("pu MCC = %.2f\n", pu_numerator / pu_denominator)

}
