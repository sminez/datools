#! /usr/bin/python3
'''
Convert a csv to json-lines format.
Accepts either a deliminated file (specified with -d"<DELIMINATOR>") or
reads deliminated data from stdin.

Example usage:
>>> cat my-csv.csv | some-other-program | csv2json | jq ...
>>> csv2json -d";" my-semi-colon-deliminated.csv
'''
import argparse
import json
import sys


def replace_true_false(fields):
    new = []
    for f in fields:
        if f == "true":
            new.append(True)
        elif f == "false":
            new.append(False)
        else:
            new.append(f)
    return new


parser = argparse.ArgumentParser(
    description='Convert a csv to JSON lines'
)
parser.add_argument('file', nargs='?')
parser.add_argument('-d', '--delim', default=',')
args = parser.parse_args()

if args.file:
    f = open(args.file, 'r')
elif not sys.stdin.isatty():
    f = sys.stdin
else:
    print('ERROR: unable to detect input', file=sys.stderr)
    sys.exit(42)

# Pull of the headers
headers = next(f).strip().split(args.delim)
for line in f:
    fields = replace_true_false(line.strip().split(args.delim))
    print(json.dumps({k: v for k, v in zip(headers, fields)}))
